<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.mappers.board">

   <!-- tbl_board start -->

   <!-- 게시물 작성 -->
   <insert id="write" parameterType="com.board.domain.BoardVO"
      useGeneratedKeys="true" keyProperty="bno">
      insert into
      tbl_board(title,
      writer, pNum)
      values(
      #{title}, #{writer}, #{pNum}
      )
   </insert>

   <!-- 게시물 조회 -->
   <select id="view" parameterType="int"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from
      tbl_board
      where
      bno = #{bno}
   </select>

   <!-- 게시물 수정 -->
   <update id="modify" parameterType="com.board.domain.BoardVO">
      update tbl_board
      set
      title =
      #{title},
      writer = #{writer},
      pNum = #{pNum}
      where bno = #{bno}
   </update>

   <!-- 게시글 조회수 갱신 -->
   <update id="hitViewCnt" parameterType="int">
      update tbl_board
      set
      viewCnt = viewCnt + 1
      where bno = #{bno}
   </update>

   <!-- 게시물 삭제 -->
   <delete id="delete" parameterType="int">
      delete
      from tbl_board
      where bno
      = #{bno}
   </delete>

   <!-- 게시글 총 갯수 -->
   <select id="count" resultType="int">
      select count(bno) from tbl_board
   </select>
   
   <!-- 작성자의 게시글 총 갯수 -->
   <select id="countMyPage" parameterType="int" resultType="int">
      select count(bno) from tbl_board
      where writer = #{userID}
   </select>

   <!-- 게시물 목록 + 페이징 + 검색 -->
   <select id="listPageSearch" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      <if test='searchType.equals("title")'>
         WHERE (title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
         WHERE (writer LIKE concat('%', #{keyword}, '%'))
      </if>
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 게시물 좋아요 목록 -->
   <select id="getLikePage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum = -1
      order by likeCnt desc, bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 게시물 최신 목록 -->
   <select id="getNewPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum = -1
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
      <!-- 게시물 좋아요 목록 -->
   <select id="getLikeSearchPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where
      <if test='searchType.equals("title")'>
         (title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
         (writer LIKE concat('%', #{keyword}, '%'))
      </if>
      and pNum = -1
      order by likeCnt desc, bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 게시물 최신 목록 -->
   <select id="getNewSearchPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where
      <if test='searchType.equals("title")'>
      	(title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
      	(writer LIKE concat('%', #{keyword}, '%'))
      </if>
      and pNum = -1
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
      <!-- 게시물 좋아요 목록 -->
   <select id="getUserLikePage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1", #{userID})
      order by likeCnt desc, bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 게시물 최신 목록 -->
   <select id="getUserNewPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1", #{userID})
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 이웃 게시물 목록 -->
   <select id="getUserFolPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where writer in
      <foreach collection="fforfList" item="item" open="(" close=")" separator=",">
         #{item.following}
      </foreach>
      and pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1")
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
         <!-- 게시물 좋아요 목록 -->
   <select id="getUserLikeSearchPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1", #{userID}) and
      <if test='searchType.equals("title")'>
         (title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
         (writer LIKE concat('%', #{keyword}, '%'))
      </if>
      order by likeCnt desc, bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 게시물 최신 목록 -->
   <select id="getUserNewSearchPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1", #{userID}) and
      <if test='searchType.equals("title")'>
         (title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
         (writer LIKE concat('%', #{keyword}, '%'))
      </if>
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 이웃 게시물 목록 -->
   <select id="getUserFolSearchPage" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where writer in
      <foreach collection="fforfList" item="item" open="(" close=")" separator=",">
         #{item.following}
      </foreach>
      and pNum in
      <foreach collection="fforfList" item="item" open="(" close="" separator=",">
         #{item.following}
      </foreach>
      , "-1") and
      <if test='searchType.equals("title")'>
         (title LIKE concat('%', #{keyword}, '%'))
      </if>
      <if test='searchType.equals("writer")'>
         (writer LIKE concat('%', #{keyword}, '%'))
      </if>
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>
   
   <!-- 좋아요 증가 -->
   <update id="likeUpTbl" parameterType="com.board.domain.LikeVO">
      update tbl_board
      set
      likeCnt = likeCnt + 1
      where bno = #{tblBno}
   </update>
   
   <!-- 좋아요 감소 -->
   <update id="likeDownTbl" parameterType="com.board.domain.LikeVO">
      update tbl_board
      set
      likeCnt = likeCnt - 1
      where bno = #{tblBno}
   </update>
   
   <!-- 좋아요 갯수 -->
   <select id="likeCnt" parameterType="int" resultType="int">
      select likeCnt from tbl_board where bno = #{tblBno}
   </select>
   
   <!-- 마이페이지 게시물 목록 + 페이징 + 검색 -->
   <select id="MyPageSearch" parameterType="hashMap"
      resultType="com.board.domain.BoardVO">
      select
      bno, title, writer, regDate, viewCnt, pNum, likeCnt
      from tbl_board
      where writer = #{writer}
      order by bno desc
      limit #{displayPost}, #{postNum}
   </select>


   <!-- tbl_board end -->
   <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
   <!-- file_board start -->

   <!-- 파일 추가 -->   
   <insert id="imgUpload" parameterType="hashMap">
      insert into
      file_board(latitude, longitude, timeView, fileName, path, userID)
      values
      <foreach collection="fileVOList" item="item" separator=" , ">
         (#{item.latitude}, #{item.longitude},
         #{item.timeView}, #{item.fileName}, #{item.path}, #{item.userID})
      </foreach>
   </insert>

   <!-- 파일 불러오기 -->
   <select id="viewFile" parameterType="int"
      resultType="com.board.domain.FileVO">
      select
      id, fileBno, latitude, longitude, timeView, path, content, place
      from
      file_board
      where fileBno = #{bno}
      order by timeView
   </select>
   
   <!-- 파일 불러오기 -->
   <select id="modifyFile" parameterType="hashMap"
      resultType="com.board.domain.FileVO">
      select
      id, fileBno, latitude, longitude, timeView, path, content, place
      from
      file_board
      where userID = #{userID} and fileBno = 0 or userID = #{userID} and fileBno = #{bno}
      order by timeView
   </select>
   
   <!-- 파일 불러오기 -->
   <select id="writeFile" parameterType="int"
      resultType="com.board.domain.FileVO">
      select
      id, latitude, longitude, timeView, path
      from
      file_board
      where userID = #{userID} and fileBno = 0
      order by timeView
   </select>

   <!-- 파일 수정 
   <update id="modifyFile" parameterType="com.board.domain.FileVO">
      update file_board
      set
      timeView = #{timeView},
      latitude = #{latitude},
      longitude = #{longitude},
      content = #{content}
      where id = #{id}
   </update>
   -->
   <!-- 파일 추가 -->   
   <update id="writeClick" parameterType="hashMap">
   <foreach collection="fileVOList" item="item" separator=" ; ">
      update file_board
      set
      fileBno = #{item.fileBno},
      timeView = #{item.timeView},
      place = #{item.place},
      content = #{item.content}
      where id = #{item.id}
      </foreach>
   </update>

   <!-- 파일 삭제 -->
   <delete id="deleteFile" parameterType="int">
      delete
      from file_board
      where id = #{del}
   </delete>
   
   <!-- 게시글 파일 삭제 -->
   <delete id="deleteFFB" parameterType="int">
      delete
      from file_board
      where fileBno = #{bno}
   </delete>
   
   <!-- 게시글 파일 삭제 -->
   <delete id="beforeunload" parameterType="int">
      delete
      from file_board
      where userID = #{userID} and fileBno = 0
   </delete>
   
   <!-- 게시글 파일 삭제 -->
   <select id="beforeunloadList" parameterType="int" resultType="String">
      select
      fileName
      from file_board
      where userID = #{userID} and fileBno = 0
   </select>
   
   <!-- 파일 이름 불러오기 -->
   <select id="fileName" parameterType="int" resultType="String">
      select
      fileName
      from
      file_board
      where id = #{del}
   </select>
   
   <!-- 파일 이름 불러오기 -->
   <select id="fileNameList" parameterType="int" resultType="String">
      select
      fileName
      from
      file_board
      where fileBno = #{bno}
   </select>

	<insert id="likeImgs" parameterType="hashMap">
      insert into
      likeImg(fileBno, imgBno)
      values
      <foreach collection="likeImgVOList" item="item" separator=" , ">
         (#{item.fileBno}, #{item.imgBno})
      </foreach>
	</insert>
	
	<delete id="deleteLikeImgs" parameterType="int">
		delete from
		likeImg
		where fileBno = #{fileBno}
	</delete>
	
	<select id="selectLikeImg" parameterType="int" resultType="com.board.domain.LikeImgVO">
		select id, fileBno, imgBno
		from likeImg
		where fileBno = #{fileBno}
	</select>

   <!-- file_board end -->
   <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->   
   <!-- reg_board start -->

   <!-- 회원가입 -->
   <insert id="register" parameterType="com.board.domain.MemberVO">
      insert into
      reg_board(mID, mPW, mNickname, mEmail, mImg)
      values(
      #{mID}, #{mPW}, #{mNickname}, #{mEmail}, "/resources/imgs/p1.png"
      )
   </insert>

   <!-- 로그인 -->
   <select id="login" parameterType="com.board.domain.MemberVO"
      resultType="com.board.domain.MemberVO">
      select
      id, mID, mPW, mNickname, mEmail, mImg
      from
      reg_board
      where
      mID = #{mID}
   </select>
   
   <!-- 회원정보 가져오기 -->
   <select id="memberVO" parameterType="int"
      resultType="com.board.domain.MemberVO">
      select
      id, mID, mPW, mNickname, mEmail, mImg
      from
      reg_board
      where
      id = #{id}
   </select>
   
      <!-- 회원정보 가져오기 -->
   <select id="followMemberVO" parameterType="hashMap"
      resultType="com.board.domain.MemberVO">
      select
      id, mID, mPW, mNickname, mEmail, mImg
      from
      reg_board
      where id in
      <foreach collection="list" item="item" open="(" close=")" separator=",">
         #{item.userID}
      </foreach>
   </select>
   
   <!-- 아이디 확인 -->
   <select id="idCheck" parameterType="string"
      resultType="com.board.domain.MemberVO">
      select id, mID from reg_board
      where mID = #{mID}
   </select>

   <!-- 닉네임 확인 -->
   <select id="nicknameCheck" parameterType="string"
      resultType="com.board.domain.MemberVO">
      select mNickname from reg_board
      where mNickname = #{mNickname}
   </select>

   <!-- 비밀번호 확인 -->
   <select id="pwCheck" parameterType="string"
      resultType="com.board.domain.MemberVO">
      select mPW from reg_board
      where mID = #{mID}
   </select>

   <!-- 사진 없는 프로필 변경 -->
   <update id="profile" parameterType="com.board.domain.MemberVO">
      update reg_board
      set
      mNickname = #{mNickname},
      mEmail = #{mEmail}
      where
      mID = #{mID}
   </update>

   <!-- 사진 있는 프로필 변경 -->
   <update id="profileImg"
      parameterType="com.board.domain.MemberVO">
      update reg_board
      set
      mNickname = #{mNickname},
      mEmail = #{mEmail},
      mImg = #{mImg}
      where
      mID = #{mID}
   </update>

   <!-- 비밀번호 변경 -->
   <update id="password" parameterType="com.board.domain.MemberVO">
      update reg_board
      set
      mPW = #{mPW}
      where
      mID = #{mID}
   </update>

   <!-- reg_board end -->
   <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
   <!-- tp_board start -->

   <!-- 초기화 -->
   <delete id="reset" parameterType="int">
      delete
      from tp_board
      where tpBno = #{id}
   </delete>

   <!-- 이동수단 등록 -->
   <insert id="set" parameterType="com.board.domain.TpVO">
      insert into
      tp_board(tpBno, fileBno, tp)
      values(#{tpBno}, #{fileBno}, #{tp})
   </insert>

   <!-- 이동수단 불러오기 -->
   <select id="viewTp" parameterType="int"
      resultType="com.board.domain.TpVO">
      select
      tpBno, fileBno, tp
      from tp_board
      where fileBno = #{bno}
   </select>
   
   <!-- 게시글 이동수단 삭제 -->
   <delete id="deleteTFB" parameterType="int">
      delete
      from tp_board
      where fileBno = #{bno}
   </delete>

   <!-- tp_board end -->
   <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
   <!-- like_board start -->
   
   <!-- 조회수 증가 -->
   <insert id="likeUp" parameterType="com.board.domain.LikeVO">
      insert into
      like_board(tblBno, userID)
      values(#{tblBno}, #{userID})
   </insert>
   
   <!-- 조회수 감소 -->
   <delete id="likeDown" parameterType="com.board.domain.LikeVO">
      delete from like_board
      where tblBno = #{tblBno} and userID = #{userID}
   </delete>
   
   <!-- 좋아요 검색 -->
   <select id="likeCheck" parameterType="com.board.domain.LikeVO" resultType="com.board.domain.LikeVO">
      select
      tblBno, userID
      from
      like_board
      where tblBno = #{tblBno} and userID = #{userID}
   </select>
   
   <!-- like_board end -->
   <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
   <!-- fol_board start -->
   
   <!-- 팔로우 목록 검색 -->
   <select id="userFollow" parameterType="int" resultType="com.board.domain.FollowVO">
      select
      id, userID, following, fforf 
      from
      fol_board
      where following = #{userID} and fforf = 1
   </select>
   
   <!-- 팔로잉 목록 검색 -->
   <select id="userFollowing" parameterType="int" resultType="com.board.domain.FollowVO">
      select
      id, userID, following, fforf, folDate
      from
      fol_board
      where following = #{userID} and fforf = 0
      order by folDate desc
   </select>
   
   <!-- 맞팔로잉 검색 -->
   <select id="followingCheck" parameterType="com.board.domain.FollowVO" resultType="com.board.domain.FollowVO">
      select
      id, userID, following, fforf 
      from
      fol_board
      where userID = #{userID} and following = #{following}
   </select>
   
   <!-- 맞팔리스트 -->
   <select id="fforfList" parameterType="int" resultType="com.board.domain.FollowVO">
      select
      id, userID, following, fforf 
      from
      fol_board
      where userID = #{id} and fforf = 1
      order by folDate desc
   </select>
   
   <!-- 팔로우 -->
   <insert id="follow" parameterType="com.board.domain.FollowVO">
      insert into
      fol_board(userID, following)
      values(#{userID}, #{following})
   </insert>
   
   <!-- 언팔로우 -->
   <delete id="unFollow" parameterType="com.board.domain.FollowVO">
      delete from fol_board
      where (userID = #{userID}) and (following =  #{following})
   </delete>
   
   <!-- 맞팔로우 -->
   <update id="fforf" parameterType="com.board.domain.FollowVO">
      update fol_board
      set fforf = 1
      where ((userID = #{userID}) and (following =  #{following})) or ((userID = #{following}) and (following =  #{userID}))
   </update>
   
   <!-- 언맞팔로우 -->
   <update id="unFforf" parameterType="com.board.domain.FollowVO">
      update fol_board
      set fforf = 0
      where ((userID = #{userID}) and (following =  #{following}))
   </update>
   
   <!-- fol_board end -->

</mapper>